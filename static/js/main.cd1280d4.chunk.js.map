{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","console","log","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cd1280d4.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      //  1. Check that we are on a tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside game area height\r\n          //  We should be able to go though the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our ove is inside the game area width\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell we move to isnt set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport bgImage from \"../../img/bg.png\";\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: \"0,0,0\" },\r\n  I: {\r\n    shape: [\r\n              [0, \"I\", 0, 0],\r\n              [0, \"I\", 0, 0],\r\n              [0, \"I\", 0, 0],\r\n              [0, \"I\", 0, 0]\r\n            ],\r\n    color: \"80, 227, 230\"\r\n  },\r\n  J: {\r\n    shape: [\r\n              [0, \"J\", 0],\r\n              [0, \"J\", 0],\r\n              [\"J\", \"J\", 0]\r\n            ],\r\n    color: \"36, 95, 223\"\r\n    \r\n  },\r\n  L: {\r\n    shape: [\r\n              [0, \"L\", 0],\r\n              [0, \"L\", 0],\r\n              [0, \"L\", \"L\"]\r\n            ],\r\n    color: \"223, 173, 36\"\r\n    \r\n  },\r\n  O: {\r\n    shape: [\r\n              [\"O\", \"O\"],\r\n              [\"O\", \"O\"]\r\n            ],\r\n    color: \"223, 217, 36\"\r\n    \r\n  },\r\n  S: {\r\n    shape: [\r\n              [0, \"S\", \"S\"],\r\n              [\"S\", \"S\", 0],\r\n              [0, 0, 0]\r\n            ],\r\n    color: \"48, 211, 56\"\r\n    \r\n  },\r\n  T: {\r\n    shape: [\r\n              [0, 0, 0],\r\n              [\"T\", \"T\", \"T\"],\r\n              [0, \"T\", 0]\r\n            ],\r\n    color: \"132, 61, 198\"\r\n    \r\n  },\r\n  Z: {\r\n    shape: [\r\n              [\"Z\", \"Z\", 0],\r\n              [0, \"Z\", \"Z\"],\r\n              [0, 0, 0]\r\n            ],\r\n    color: \"227, 78, 78\"\r\n    \r\n  }\r\n  \r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino]\r\n}\r\n","import { useState, useCallback } from \"react\";\r\n\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    // Make rows become columns (transpose)\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map(col => col[index])\r\n    );\r\n    // Reverse each row to get a rotated matrix\r\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n  margin: 0 auto;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\r\n  border-top-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-bottom-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`;\r\n","import React from \"react\";\r\nimport { StyledCell } from \"./styles/StyledCell\";\r\nimport { TETROMINOS } from \"../tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}>\r\n    {console.log(\"Type\", TETROMINOS[type].color)}\r\n  </StyledCell>\r\n);\r\n\r\nexport default React.memo(Cell);\r\n","import React from \"react\";\r\nimport { StyledStage } from \"./styles/StyledStage\";\r\n\r\nimport Cell from \"./Cell\";\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? \"red\" : \"#999\")};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n  text-align: center;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledDisplay } from \"./styles/StyledDisplay\";\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.div`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  text-align: center;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledStartButton } from \"./styles/StyledStartButton\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { createStage, checkCollision } from \"../gameHelpers\";\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\r\n\r\n// Custom Hooks\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useStage } from \"../hooks/useStage\";\r\nimport { useGameStatus } from \"../hooks/useGameStatus\";\r\n\r\n// Components\r\nimport Stage from \"./Stage\";\r\nimport Display from \"./Display\";\r\nimport StartButton from \"./StartButton\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  console.log(\"re-render\");\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setLevel(0);\r\n    setLevel(0);\r\n  };\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game Over\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER!!!\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1) + 200);\r\n      }\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    console.log(\"Interval Off\");\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38 || 32) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role='button'\r\n      tabIndex='0'\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text='Game Over' />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // Check if we scored\r\n    if (rowsCleared > 0) {\r\n      // Calc score\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport Tetris from \"./components/Tetris\";\n\nconst App = () => (\n  <div className='App'>\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}